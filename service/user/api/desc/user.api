syntax = "v1"

info (
	title:   "mall"
	desc:    "商城"
	author:  "sjxiang"
	email:   "sjxiang2023@gmail.com"
	version: "1.0"
)

type SignupRequest {
	Username   string `json:"username" validate:"required"`
	Password   string `json:"password" validate:"required,min=4,max=32"`
	RePassword string `json:"re_password" validate:"required,min=4,max=32"`
	Gender     int    `json:"gender" validate:"oneof=0 1 2"`
}

type SignupResponse {
	Message string `json:"message"`
}

@server (
	prefix: api
)
service user-api {
	@doc(
		summary: "注册"
	)
	@handler SignupHandler
	post /user/signup (SignupRequest) returns (SignupResponse)

	@doc(
		summary: "登录"
	)
	@handler LoginHandler
	post /user/login (LoginRequest) returns (LoginResponse)
}

@server (
	prefix:     api
	jwt:        Auth // 添加jwt鉴权
	middleware: Cost // 添加自定义中间件（路由中间件）
)
service user-api {
	@doc(
		summary: "用户详情，查询参数 /user/detail?user_id=xxx"
	)
	@handler DetailHandler
	get /user/detail (DetailRequest) returns (DetailResponse)
}

// 登录
type LoginRequest {
	Username string `json:"username"`
	Password string `json:"password"`
}

type LoginResponse {
	Message      string `json:"message"`
	AccessToken  string `json:"access_token"`
	AccessExpire int    `json:"access_expire"`
	RefreshAfter int    `json:"refresh_after"`
}

// 用户详情接口  -->  传userID，该接口返回用户详情（用户名、性别）
// user/detail?userID=119862
// lesson61:
// 用户详情接口需要登录之后才能访问，需要认证auth
// 1. 用户成功登录之后
// 1.1 生成JSON Web Token(JWT)
// 1.2 返回给前端
// 前端代码会把token保存起来，后续每一次请求都会带上这个token
// 2. 后端需要鉴权的接口就会对请求进行鉴权，从请求头中取到token进行解析
// 2.1 解析成功就是登录用户
// 2.2 解析失败就是未登录用户或token失效的用户
// 3. refresh token(可选)

type DetailRequest {
	UserID int64 `form:"user_id"`  
}

type DetailResponse {
	Username string `json:"user_name"`
	Gender   int    `json:"gender"`
}

